#ifndef TRACKING_H
#define TRACKING_H

#include <vector>

#include <opencv2/core/core.hpp>
#include <opencv/cv.hpp>
#include <opencv2/highgui/highgui.hpp>
#include <opencv2/video/background_segm.hpp>

#include "fileLoader.h"
#include "myBGSubMog2.h"

	using namespace cv;

class Tracking
{
private:

    class TrackingPoint : public Point2f
    {
    public:
        TrackingPoint();
        TrackingPoint(Point2f p_point);
        Scalar color;

        void setColor(Scalar p_color);
    };

	FileLoader* m_fileLoader;
	Mat currentFrame;
    Mat prevFrame_gray;
	Mat eroded;
	Mat opened;

    // ####     MOG2 Backgroundsubstraction     ####
    Ptr<BackgroundSubtractor> mog2BackgoundSubstractor; //MOG2 Background subtractor
	myBGSubMog2 bgsubstr;
    //learningRate for the backgound-substractor
    const double learning_rate;
    //fg mask generated by MOG2 method
    Mat foregroundMask;

    // ####     LK Optical flow     ####
    std::vector< Point2f > cornersToTrack;
    std::vector< Point2f > trackedCorners;

    // ###      Farneback Optical flow      ####
    Mat m_flow_Farneback;
    std::vector<Vec2f> boundingBoxDirections;

    const int maxCorners;
    const float qualityLevel;
    const float minDistance;
    Size subPixWinSize;
    Size winSize;



    // ####     detected Objects    ####
	std::vector<std::vector <Point> > m_contours;
	std::vector<Rect> boundingBoxes;

	void track_LK(InputArray gray, InputArray mask);
    void trackFarneback(InputArray gray);
	void calcObjectContours(Mat& binaryIn);
	void calcBoundingBoxes(Mat& binaryIn);
	void drawBoundingBoxes( Mat& drawOnImage );
	void drawContours( Mat& drawOnImage );
    void discardNotMovingCorners();
	void findBigBlobs(InputOutputArray image, double thresh = 90);
	void Dilation(InputArray src, OutputArray dst, int size,int kernelType, int iterations = 1);
	void Erosion(InputArray src, OutputArray dst, int size,int kernelType, int iterations = 1);


public:
    Tracking();

    void setFileLoader( FileLoader* fileLoader );
    std::vector<cv::Rect> getBoundariesOfMovement();
    void displayDebugWindows();
//    unsigned int getIdOfBoundaries( cv::Rect boundary );
//    void setParameter( string );
};

#endif // TRACKING_H
